###     script_lms_controls.yaml 
###
###  Last Edit:  December 6, 2018
###         - Removed lms_control script and moved it into intent.yaml file to function proerply  with Webhooks
###
lms_do_nothing:
  alias:  "LMS command to do nothing"
  sequence:
    - delay: 00:00:01

lms_cmd_play_song:
  alias:  "LMS command to play LMS song"
  sequence:
    - service: shell_command.lms_qry_alb_song
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "_{{states.input_text.lms_album.state | replace(' ','_')}}"
        text3: "{{states.input_text.lms_song.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.song_id.state == "0") %} loadtracks           
            {% else %} cmd:load
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.song_id.state == "0") %} track.titlesearch={{states.variable.var_lms_song.state}}           
            {% else %} track_id:{{states.sensor.song_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.song_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_play_song_spot:
  alias:  "LMS command to play Spotify song"
  sequence:
    - service: shell_command.lms_spot_art_alb_song
      data_template:
        text3: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text1: "{{states.input_text.lms_song.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_song:
  alias:  "LMS command to add LMS song to the queue"
  sequence:
    - service: shell_command.lms_qry_alb_song
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "_{{states.input_text.lms_album.state | replace(' ','_')}}"
        text3: "{{states.input_text.lms_song.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.song_id.state == "0") %} addtracks           
            {% else %} cmd:add
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.song_id.state == "0") %} track.titlesearch={{states.variable.var_lms_song.state}}           
            {% else %} track_id:{{states.sensor.song_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.song_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_add_song_spot:
  alias:  "LMS command to add Spotify song to the queue"
  sequence:
    - service: script.turn_on
      data_template:
        entity_id: script.lms_cmd_shuffle
    - service: shell_command.lms_spot_art_alb_song
      data_template:
        text3: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text1: "{{states.input_text.lms_song.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_play_playlist:
  alias:  "LMS command to play LMS playlist"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play",'{{states.input_text.lms_playlist.state|title|trim|replace(" ","_")}}']
    
lms_cmd_play_playlist_spot:
  alias:  "LMS command to play Spotify playlist"
  sequence:
    - service: shell_command.lms_spot_playlist
      data_template:
        text1: "{{states.input_text.lms_playlist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_playlist:
  alias:  "LMS command to add LMS playlist to the queue"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add",'{{states.input_text.lms_playlist.state|title|trim|replace(" ","_")}}']

lms_cmd_add_playlist_spot:
  alias:  "LMS command to add Spotify playlist"
  sequence:
    - service: shell_command.lms_spot_playlist
      data_template:
        text1: "{{states.input_text.lms_playlist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_play_artist:
  alias:  "LMS command to play LMS artist"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["loadtracks","contributor.namesearch={{states.input_text.lms_artist.state}}"]

lms_cmd_play_artist_spot:
  alias:  "LMS command to play Spotify artist"
  sequence:
    - service: shell_command.lms_spot_art
      data_template:
        text1: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_artist:
  alias:  "LMS command to add LMS artist to the queue"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["addtracks","contributor.namesearch={{states.input_text.lms_artist.state}}"]

lms_cmd_add_artist_spot:
  alias:  "LMS command to add LMS artist to the queue"
  sequence:
    - service: shell_command.lms_spot_art
      data_template:
        text1: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_play_album:
  alias:  "LMS command to play LMS album"
  sequence:
    - service: shell_command.lms_qry_alb
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.alb_id.state == "0") %} loadtracks           
            {% else %} cmd:load
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.alb_id.state == "0") %} album.titlesearch={{states.variable.var_lms_album.state}}           
            {% else %} album_id:{{states.sensor.alb_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.alb_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_play_album_spot:
  alias:  "LMS command to play Spotify album"
  sequence:
    - service: shell_command.lms_spot_art_alb
      data_template:
        text1: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_album:
  alias:  "LMS command to add LMS album to the queue"
  sequence:
    - service: shell_command.lms_qry_alb
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.alb_id.state == "0") %} addtracks           
            {% else %} cmd:add
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.alb_id.state == "0") %} album.titlesearch={{states.variable.var_lms_album.state}}           
            {% else %} album_id:{{states.sensor.alb_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.alb_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_add_album_spot:
  alias:  "LMS command to add LMS album to the queue"
  sequence:
    - service: shell_command.lms_spot_art_alb
      data_template:
        text1: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_next_track:
  alias:  "LMS command to advance to the next track"
  sequence:
    - service:  media_player.media_next_track
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        
lms_cmd_pause_player:
  alias:  "LMS command to pause a media player"
  sequence:
    - service:  media_player.media_pause
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"

lms_cmd_start_player:
  alias:  "LMS command to re-start a media player"
  sequence:
    - service:  media_player.turn_on
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
    - service:  media_player.media_play
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"

lms_cmd_play_radio:
  alias:  "LMS command to play radio station"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play",'Radio_{{states.input_text.lms_playlist.state|title|trim|replace(" ","_")}}']

lms_cmd_sync_one:
  alias: "LMS command to Sync One Player to the Master"
  sequence:
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
            {% if (states.input_boolean.lms_player1_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player1_sync
            {% elif (states.input_boolean.lms_player2_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player2_sync
            {% elif (states.input_boolean.lms_player3_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player3_sync
            {% elif (states.input_boolean.lms_player4_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player4_sync
            {% elif (states.input_boolean.lms_player5_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player5_sync
            {% endif %}

lms_cmd_sync_all:
  alias: "LMS command to Sync All Players to the Master"
  sequence:
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
            {% if (states.input_text.lms_command_intent.state == "sync all") %} 
                input_boolean.lms_player1_sync, input_boolean.lms_player2_sync, input_boolean.lms_player3_sync, input_boolean.lms_player4_sync, input_boolean.lms_player5_sync
            {% endif %}
    
lms_cmd_unsync_one:
  alias: "LMS command to Un-Sync One Player from the Master"
  sequence:
    - service: input_boolean.turn_off
      data_template:
        entity_id: >
            {% if (states.input_boolean.lms_player1_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player1_sync
            {% elif (states.input_boolean.lms_player2_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player2_sync
            {% elif (states.input_boolean.lms_player3_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player3_sync
            {% elif (states.input_boolean.lms_player4_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player4_sync
            {% elif (states.input_boolean.lms_player5_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player5_sync
            {% endif %}

lms_cmd_unsync_all:
  alias: "LMS command to Un-Sync All Players from the Master"
  sequence:
    - service: input_boolean.turn_off
      data_template:
        entity_id: >
            {% if (states.input_text.lms_command_intent.state == "unsync all") %} 
                input_boolean.lms_player1_sync, input_boolean.lms_player2_sync, input_boolean.lms_player3_sync, input_boolean.lms_player4_sync, input_boolean.lms_player5_sync
            {% endif %}
  
  

###     This concludes the section that is associated with LMS Controls application

